===================================================================
Specification as Code: Universal Template v1.0
This document is the single source of truth for the project.
It defines all requirements, architecture, tasks, and validation.
===================================================================
[environment]

--- Defines the non-negotiable target environment for the project.
--- The BuildEngine MUST verify this before executing any tasks.
target_os = "target_operating_system"
os_details = "specific_os_requirements"
language = "primary_programming_language"
language_version = "language_version_number"
build_tools = ["build_tool_1", "build_tool_2", "build_tool_3"]
external_dependencies = ["external_service_1", "external_service_2"]

===================================================================
STAGE DEFINITIONS
Defines the high-level phases of the build process.
Customize these stages based on your project type.
===================================================================
DEFINE_STAGE(setup_and_config)
DEFINE_STAGE(core_implementation)
DEFINE_STAGE(integration)
DEFINE_STAGE(testing_and_validation)
DEFINE_STAGE(packaging_and_deployment)

===================================================================
TASK DEFINITIONS
The complete, ordered recipe for building the project.
Customize these tasks based on your specific project requirements.
===================================================================
--- Stage 1: Setup & Configuration ---
TASK "Initialize Project Structure" {
[manifest] {
task_type = "FileSystemSetup",
failure_strategy = "Halt"
}
id: setup-project
stage: setup_and_config
description: "Create the project directory structure and initialize basic configuration files."
}

TASK "Implement Configuration Management" {
[manifest] {
target_file = "src/config.{ext}",
task_type = "CodeGeneration",
failure_strategy = "SequentialDebug"
}
id: implement-config
stage: setup_and_config
depends: [setup-project]
description: "Implement configuration management system with support for files, environment variables, and runtime settings."
}

--- Stage 2: Core Implementation ---
TASK "Implement Core Functionality" {
[manifest] {
target_file = "src/main.{ext}",
task_type = "CodeGeneration"
}
id: implement-core
stage: core_implementation
depends: [implement-config]
description: "Implement the main functionality and business logic of the application."
}

TASK "Implement Supporting Modules" {
[manifest] {
target_file = "src/modules/",
task_type = "CodeGeneration"
}
id: implement-modules
stage: core_implementation
depends: [implement-core]
description: "Implement supporting modules, utilities, and helper functions required by the core functionality."
}

--- Stage 3: Integration ---
TASK "Implement External Integrations" {
[manifest] {
target_file = "src/integrations/",
task_type = "CodeGeneration"
}
id: implement-integrations
stage: integration
depends: [implement-modules]
description: "Implement integrations with external services, APIs, databases, or other systems as required."
}

TASK "Implement Data Layer" {
[manifest] {
target_file = "src/data/",
task_type = "CodeGeneration"
}
id: implement-data-layer
stage: integration
depends: [implement-core]
description: "Implement data persistence, retrieval, and management functionality."
}

--- Stage 4: Testing and Validation ---
TASK "Implement Unit Tests" {
[manifest] {
target_file = "tests/unit/",
task_type = "Testing"
}
id: implement-unit-tests
stage: testing_and_validation
depends: [implement-modules]
description: "Create comprehensive unit tests for all core functionality and modules."
}

TASK "Implement Integration Tests" {
[manifest] {
target_file = "tests/integration/",
task_type = "Testing"
}
id: implement-integration-tests
stage: testing_and_validation
depends: [implement-integrations, implement-data-layer]
description: "Create integration tests to verify component interactions and external dependencies."
}

TASK "System Validation" {
[manifest] {
task_type = "Verification",
failure_strategy = "Halt"
}
id: system-validation
stage: testing_and_validation
depends: [implement-unit-tests, implement-integration-tests]
description: "Execute comprehensive system validation to ensure all requirements are met and quality standards are satisfied."
}

--- Stage 5: Packaging and Deployment ---
TASK "Build Distribution Package" {
[manifest] {
task_type = "PackageCreation"
}
id: build-package
stage: packaging_and_deployment
depends: [system-validation]
description: "Create distribution package suitable for deployment or publication to target environment."
}

TASK "Prepare Deployment Artifacts" {
[manifest] {
task_type = "DeploymentPreparation"
}
id: prepare-deployment
stage: packaging_and_deployment
depends: [build-package]
description: "Prepare deployment artifacts, configurations, and documentation for target environment."
}
